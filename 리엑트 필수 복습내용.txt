vscode-styled-components

* 삼항연산자, 조건부 랜더링
- 조건부 랜더링 방식에 사용된다.
(조건에 충복할 경우 해당 부분을 리랜더)

(조건식 ? true인 경우 : false인 경우)
{ 조건식 && true 인 경우} = {조건식 ? ture인 경우 : null}

조건식의 변수에 빈 배열 {}, [] => 값이 있는걸로 쳐져요

따라서 배열일 때는  
{조건식.length > 0 && true인 경우}
-------------------------------------------------------

* props

상위 컴포넌트(부모컴포넌트)의 값을 하위 컴포넌트에 전달할 변수를 칭하는말



-------------------------------------------------------

* 비구조화 할당( 구조분해 할당)

배열이나 객체의 속성을 해제하여 그 값을 개별 변수에 담을 수 있도록
사용하는 JavaScript 표현식 

ex)
const { 객체내 키 값 } = 객체명

-------------------------------------------------------

* HOOK 함수 

  react에서 상태 변경, 즉 가상돔의 상태를 변경할 수 있는 함수 
  그에 따른 생명주기에를 통해 다향한 이벤트를 실행할 수 있는 함수

  react 초기 상태
  class형 컴포넌트를 사용

  const 컴포넌트명 =()=>{
    현재상태 
  }

  과거 
  class 컴포넌트명 extends Components{
    ...
  }

  라이프 사이클
  [페이지가 처음 열렷을때 ~ 페이지가 닫혔을 때까지]
  이 사이에 일어나는 이벤트나 값 변경 등을 관리

  Class는 다양한 기능을 사용할 수 있지만 기계와 사용자를 혼돈시킨다.
  숙련된 React 개발자 조차도 class를 통한 react의 완벽한 이해는 힘들다.

  ===> 함수형으로 리엑트를 만들어보자 -> 함수형 컴포넌트의 등장
  ===> 자연스럽게 생명주기(라이프사이클)이 사라지고 hook 함수가 등장하였다.

-------------------------------------------------------

1. useState
- Hooks의 상태관리 함수
- 컴포넌트에서 바뀌는 값을 관리
- 값이 바뀐것을 감지하여 리랜더링
- 값이 바뀌는 것을 감지하여 리랜더링  시켜줘야할 필요가 있을 때 사용하는 변수

2. useRef
- js에서 getElementById, querySelector와 같은 DOM selector 함수 처럼
- React에서 DOM에 접근하게 되는 일이 생긴다면 접근하게 해주는 Hook 함수
- ref 객체 내부의 값은 render와 상관없이 유지된다.

-------------------------------------------------------

3. useMemo
  - 연산된 값(결과)를 반환하여 함수가 랜더링 되었을 때 사용할 수 있드록 해주는 Hooks 함수

-------------------------------------------------------

4. useCallback
  *메모이제이션
  -특정 함수를 새로 만들지 않고 랜더링 되었을때 재사용할 수 있게 해주는 Hooks함수

-------------------------------------------------------

5. useEffect

-------------------------------------------------------

* state 불변성, porator

-------------------------------------------------------

Q useMemo 와 useCallback을 사용해서 최적화를 진행한다고 했을 때 
어떤 부분에서 최적화(전방면)가 가능할까요?

메모이제이션
  -어떤 함수가 생성되거나 해당 값이 연산되는 결과가 오래걸린다 ( ex) 30초)
  -리엑트는 상태가 바뀌면 랜더링, 따라서 해당 함수나 값도 랜더링 시 재실행
  -그런데? 값이 바뀌지 않는 부분이 랜더링 되어야 할 필요가 있을까 ?

=> 값이 안바귀는 연산인데 재선언 해야할 필요가 없는 함수를 랜더링이 되더라도 
재생성 및 연산하지 않도록(랜더링 시 필요 없는 연산이나 시간을 줄여주기 위해)하기 위해 사용
